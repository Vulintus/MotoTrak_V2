function data = MotoTrakFileRead ( file )

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% MotoTrakFileRead.m
% Last date modified: 8/16/2016
% Author: David Pruitt
% Description: This is a first pass at some code to load in MotoTrak 2.0
%   data files into Matlab.  These data files are generated by the C# 
%   MotoTrak program using file version -5.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Create an empty structure for the data
data = [];

%Open the MotoTrak file
fid = fopen(file, 'r');

%Rewind to the beginning of the file
fseek(fid, 0, -1);

%Get the file version
version = fread(fid, 1, 'int8');

if (version == -5)
    
    %If the file version is -5, then go ahead and attempt to read it
    data.version = version;
    
    %Read the session start time
    data.start_time = fread(fid, 1, 'float64');
    
    %Read the session end time
    data.end_time = fread(fid, 1, 'float64');
    
    %Read the number of characters in the rat name
    N = fread(fid, 1, 'uint8');
    
    %Read the rat name
    data.rat_name = fread(fid, N, '*char')';
    
    %Read the number of characters in the booth name
    N = fread(fid, 1, 'uint8');
    
    %Read the booth name
    data.booth_name = fread(fid, N, '*char')';
    
    %Read the number of characters in the stage title
    N = fread(fid, 1, 'uint8');
    
    %Read the stage title
    data.stage_name = fread(fid, N, '*char')';
    
    %Read the number of characters in the device name
    N = fread(fid, 1, 'uint8');
    
    %Read the device name
    data.device_name = fread(fid, N, '*char')';
    
    %Read the number of characters in the session notes
    N = fread(fid, 1, 'uint16');
    
    %Read the session notes
    data.session_notes = fread(fid, N, '*char')';
    
    %Read the number of calibration coefficients that exist
    N = fread(fid, 1, 'uint8');
    
    %Read in each calibration coefficient
    data.calibration_coefficients = fread(fid, N, '*float32');
    
    %Read in the number of streams that exist in this data file
    N = fread(fid, 1, 'uint8');
    
    %Read in the metadata for each data stream
    data.data_streams = struct('stream_description', {}, 'stream_units', {});
    for i=1:N
        %Load in the description of each stream
        n_descr = fread(fid, 1, 'uint8');
        descr = fread(fid, n_descr, '*char')';
        
        %Load in the units for each stream
        n_units = fread(fid, 1, 'uint8');
        units = fread(fid, n_units, '*char')';
        
        %Save the data stream metadata to our structure
        new_stream.stream_description = descr;
        new_stream.stream_units = units;
        data.data_streams(end+1) = new_stream;
    end
    
    %Read in the number of stage parameters that exist for this session
    N = fread(fid, 1, 'uint32');
    
    %Read in the stage parameters for this stage
    data.parameters = {};
    for i=1:N
        n_param_name = fread(fid, 1, 'uint8');
        param_name = fread(fid, n_param_name, '*char')';
        data.parameters{end+1} = param_name;
    end
    
    %Read in all of the trials
    while (~feof(fid))
        
        %Read in the trial number
        trial_number = fread(fid, 1, 'uint32');
        
        %Break out of the loop if the trial number is empty
        if (isempty(trial_number))
            break;
        end
        
        %Read in the start time of the trial
        data.trial(trial_number).start_time = fread(fid, 1, 'float64');
        
        %Read in the outcome of the trial
        result = fread(fid, 1, 'uint8');
        data.trial(trial_number).result = result;
        
        %If the trial was a pause, then read the end time of the trial
        if (result == 'P')
            data.trial(trial_number).end_time = fread(fid, 1, 'float64');
        else
            data.trial(trial_number).end_time = NaN;
        end
        
        %Read in the hit window duration
        data.trial(trial_number).hit_window_duration = fread(fid, 1, 'float32');
        
        %Read in the pre-trial duration
        data.trial(trial_number).pre_trial_duration = fread(fid, 1, 'float32');
        
        %Read in the post-trial duration
        data.trial(trial_number).post_trial_duration = fread(fid, 1, 'float32');
        
        %Read in the post-trial time-out period
        data.trial(trial_number).post_trial_timeout = fread(fid, 1, 'float32');
        
        %Read in the manipulandum position
        data.trial(trial_number).position = fread(fid, 1, 'float32');
        
        %Read in the number of variable parameters that exist for the trial
        N = fread(fid, 1, 'uint8');
        
        %Read in each variable parameter
        variable_params = struct('name', {}, 'value', {});
        for i=1:N
            %Read in the length of the parameter name
            n_param_name = fread(fid, 1, 'uint8');
            
            %Read in the parameter name
            param_name = fread(fid, n_param_name, '*char')';
            
            %Read in the parameter value
            param_value = fread(fid, 1, 'float64');
            
            new_param.name = param_name;
            new_param.value = param_value;
            variable_params(end+1) = new_param;
        end
        data.trial(trial_number).parameters = variable_params;
        
        %Read in the number of hits that occurred during this trial
        N = fread(fid, 1, 'uint8');
        
        %Read in the timestamp of each hit
        data.trial(trial_number).hit_times = fread(fid, N, '*float64');
        
        %Read in the number of output triggers that occurred during this
        %trial
        N = fread(fid, 1, 'uint8');
        
        %Read in the output triggers for the trial
        data.trial(trial_number).output_trigger_times = fread(fid, N, '*float64');
        
        %Read in the number of samples in each data stream for this trial
        N = fread(fid, 1, 'uint32');
        
        %Read in each data stream
        num_streams = length(data.data_streams);
        data.trial(trial_number).signal = nan(num_streams, N);
        for i=1:num_streams
            data.trial(trial_number).signal(i, :) = fread(fid, N, '*float64');
        end
        
    end
    
else
    %If the version doesn't equal -5, print an error message and exit this
    %function
    disp('Incorrect file version.  We cannot read this file.');
    return;
end

end






























